// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum enumFriendRequest {
  REQUEST
  ACCEPT
  DENY
}

//побитовая модель доступа
model permissions {
  bit  Int    @id
  name String
}

//модель ролей в системе
model Role {
  bit  Int    @id
  name String
}

// Модель для сохранения файлов
model Files {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  filename String
  mimetype String?
  encoding String

  data Bytes
  size Int

  checksum String @unique
}

model Lession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  mimetype String?
  url      String?
  text     String?
}

// модель школ
model School {
  id     Int    @id @default(autoincrement())
  name   String
  chunks Json

  years       String[]
  coordinates String[]
}

// модель excel parsed from file
model excelFieldsOfStudy {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  fileid    Int

  ticketStatus Boolean  @default(false)
  nameChunks   String[] @default([])
  nameYear     String   @default("")

  schoolid             Int[]  @default([])
  originalFileChecksum String @unique
}

model excelFieldsOfStudyNew {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  fileid    Int

  ticketStatus Boolean @default(false)

  schoolid             Int[]  @default([])
  originalFileChecksum String @unique
}

model SchoolNew {
  id Int @id @default(autoincrement())

  idInFile    String? @default("")
  name        String? @default("")
  address     String? @default("")
  phone       String? @default("")
  email       String? @default("")
  coordinates String? @default("")
  district    String? @default("")
}

// модель комментариев
model Comments {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  description String
  title       String?

  likes    Int @default(0)
  dislikes Int @default(0)
}

// модель "этапов" курса
model Stage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  description String?
  title       String?

  mime_type_coverimage String? @default("image/png")
  coverimage           String?

  type      String
  fileid    Int[]  @default([])
  lessionid Int[]  @default([])

  commentsid Int[] @default([])
  likes      Int   @default(0)
  dislikes   Int   @default(0)
}

// модель курсов
model Cource {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  description String?
  title       String?

  requirements    String? @default("none")
  dificulty       Int     @default(0)
  difficultylabel String? @default("Easy")

  categoryid    Int?
  categorylabel String?

  quizzesid Int[] @default([])

  mime_type_icons String @default("image/svg+xml")
  active_icon     String @default("")
  inactive_icon   String @default("")

  mime_type_background_img String  @default("image/png")
  background_img           String? @default("")

  stagesid Int[]
}

// модель вопросов
model Quizzes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type Int @default(0)

  data        Json
  description String?
  title       String?
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title String  @default("")
  text  String  @default("")
  image String?

  authorid   Int
  authorname String? @default("")
}

model Iv_storage {
  userid Int @id @default(autoincrement())

  iv String @default("")
}

model Keys {
  userid Int @id

  key      String
  isHidden Boolean @default(true)
}

// модель токенов
model ActiveToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userid                    Int
  token                     String @unique //токен(внутренний)
  secure_token_part_private String @default("")
  description               String @default("CbAS") //описание для кого выдан токен или кем CbAS(Created by AutoSystem)
  permissions               BigInt @default(1) //Какие права у токена. Права выше чем у пользователя не работают(если у толькователя права только 3, а тут выставлено 7, то права будут на уровне 3, НО если вдруг у пользователя права повысились до 15, то права его по этому токену будут 7)

  usedAt      DateTime @default(now()) @updatedAt
  countOfUses Int      @default(0)
}

model UserFeed {
  userid Int @id

  likesid  Int[] @default([])
  comments Int[] @default([])
  posts    Int[] @default([])
}

// model progress {
//   id          Int      @id @default(autoincrement())
//   createdAt   DateTime @default(now())
//   courseid Int?
//   userid Int?

//   courceprogress Int? @default(0)
//   testprogress Int? @default(0)
// }

model FriendList {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user1  Int
  user2  Int
  status enumFriendRequest @default(REQUEST)
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Int      @default(3)
  permissions BigInt   @default(2)
  other       Json     @default("{}")
  isActive    Boolean  @default(true)

  //crypted!!!
  firstname  String? //name
  lastname   String? //lastname
  middlename String? //middle name
  birthday   DateTime? //birthday
  age        Int?

  paircatchphrases String[] @default([])
  catchphrases     String[] @default(["key1", "key2", "key3"])

  city    String @default("Moscow")
  country String @default("Russia")

  login String  @unique //login
  hash  String //pswd
  email String? //email

  parentid Int[] @default([0]) //parentids

  score     Int    @default(0) //rating score
  courcesid Int[]  @default([]) // cources id's
  progress  Json   @default("{}") // ???
  friendsid Int[]  @default([]) // friends
  interests String @default("")

  tests Int[] @default([])

  rating Float   @default(5) //rating 0.0-5.0
  social Json    @default("{}") //{'vk':"vk.com/durov", ...}
  photo  String? //url to photografy

  categories Json? @default("{}")

  @@map("users")
}
